# –ö–û–ú–ê–ù–î–´ –ò–ì–†–´:
# 1. Balance (user)
# 2. Bonus
# 3. Casino [amount]
# 4. Pay [member] [amount]
# 5. Work [work]




import discord
from discord.ext import commands

import var
from var import connection, cursor
from discord.ext.commands import BucketType
from discord.ext.commands import cooldown
import random
from Cybernator import Paginator
from function import embed_func, db_balance_user, db_xp_user, db_descBalance, deleteBtn
# import pymysql
from function import msgXp
from discord.utils import get


class Game(commands.Cog):
	def __init__(self, bot):
		self.bot = bot








# @client.command()
# @commands.has_permissions( administrator = True )
# async def banan(ctx, member: discord.Member, *, reason=None):
#     emb = discord.Embed(title=f':octagonal_sign: | –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è __{member.name}__',description=f'\n:red_square: **–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É:**',color = var.cMain)
#     emb.set_thumbnail(url= member.avatar_url)
#     emb.set_footer(text=f'–í—ã–∑–≤–∞–Ω–æ: {ctx.author.name}', icon_url= ctx.author.avatar_url)
#     await ctx.send(
#         embed = emb,
#         components = [
#             Button(style=ButtonStyle.blue, label="–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–± –ø—Ä–æ –±–∞–Ω"),
#         ]
#     )
#     res = await client.wait_for("button_click")
#     if res.channel == ctx.channel:
#         emb = discord.Embed(title=f':octagonal_sign: | –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –±–∞–Ω __{member.name}__',description=f'\n:red_square: **–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –±–∞–Ω:**',color = var.cMain)
#         emb.set_footer(text=f'|  –í—ã–∑–≤–∞–Ω–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ctx.author.name}', icon_url= ctx.author.avatar_url)
#         emb.set_thumbnail(url= member.avatar_url)
#         emb.add_field(name=':shield:  |  –ò–º—è –ù–∞—Ä—É—à–∏—Ç–µ–ª—è:',value = member.name)
#         emb.add_field(name=' :drum:   |  –ê–π–¥–∏ –ù–∞—Ä—É—à–∏—Ç–µ–ª—è:',value = member.id)
#         emb.add_field(name=':ring:    |   –¢–µ–≥ –ù–∞—Ä—É—à–∏—Ç–µ–ª—è:',value = member.discriminator)
#         emb.add_field(name=':joystick:|    –ü—Ä–∏—á–∏–Ω–∞ –ù–∞—Ä—É—à–µ–Ω–∏—è:',value = reason)
#         emb.add_field(name=':beginner:| –î–∞—Ç–∞ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:',value = ctx.author.created_at.strftime("%d.%m.%Y %H:%M:%S"))
#         emb.add_field(name=f':notebook:  | –î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–Ω–∏—è: ', value = f'{ctx.author.joined_at.strftime("%d.%m.%Y %H:%M:%S")}')
#         await res.respond(embed=emb)




# # –£–ü–†–ê–í–õ–ï–ù–ò–ï COGS
# @client.command(  aliases = var.aCogsList, brief = var.bCogsList, usage = var.uCogsList  )
# @commands.is_owner()
# async def __cogslist( ctx ):
#     await ctx.send( embed = discord.Embed(description=f':white_check_mark: –°–ø–∏—Å–æ–∫ –∫–æ–≥–æ–≤: {extensions}', color = var.cSuccess))

# @client.command( aliases = var.aLoad, brief = var.bLoad, usage = var.uLoad )
# @commands.is_owner()
# async def __load( ctx, extension ):
#     channel = client.get_channel( var.kLog )
#     client.load_extension(f"cogs.{extension}")
#     await channel.send( embed = discord.Embed(description=f':white_check_mark: **COG:** ``{extension}`` –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω', color = var.cSuccess))

# @client.command( aliases = var.aUnload, brief = var.bUnload, usage = var.uUnload )
# @commands.is_owner()
# async def __unload( ctx, extension ):
#     channel = client.get_channel( var.kLog )
#     client.unload_extension(f"cogs.{extension}")
#     await channel.send( embed = discord.Embed(description=f':x: **COG:** ``{extension}`` –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω', color = var.cError))
#     print( f'Cogs - "{extension}" disable' )





	# #–ò–ì–†–ê –í –ö–†–ê–®
	# @commands.command( aliases = var.aGameRoulette, brief = var.bGameRoulette, usage = var.uGameRoulette )
	# # @cooldown(1, 1, BucketType.user)
	# async def __crash( self, ctx, amount, bet ):
	# 	roulette = random.randint(0, 36)
	# 	red = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
	# 	black = [2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35]
	# 	red_text = ['red', '–∫—Ä–∞—Å–Ω–æ–µ', '–∫—Ä–∞—Å']
	# 	black_text = ['—á–µ—Ä–Ω–æ–µ', '—á—ë—Ä–Ω–æ–µ', '—á–µ—Ä–Ω', '—á—ë—Ä–Ω', 'black']


	# 	balance_user = db_balance_user(ctx.author.id)
	# 	if amount < 1:
	# 		await ctx.send('–£–∫–∞–∂–∏ —Å—É–º–º—É –±–æ–ª—å—à–µ 1$')
	# 		return
	# 	elif balance_user < amount:
	# 		await ctx.send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
	# 		return

	# 	try:
	# 		if bet in (red_text + black_text):
	# 			pass
	# 		else:
	# 			await ctx.send('–û—à–∏–±–∫–∞')
	# 			return
	# 	except Exception as e:
	# 		print(e)

			
	# 	add = -int(amount)
	# 	wl = ['–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É', '']
	# 	if roulette == 0:
	# 		result = f'üíö –í—ã–ø–∞–ª {roulette}'
	# 		if bet in ['0', 'zero', 'null', 0]:
	# 			add = int(amount) * 10
	# 			wl = ['–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É', '+']
	# 	if roulette == bet:
	# 		add = int(amount) * 10
	# 		wl = ['–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É', '+']
	# 	if roulette in black:
	# 		result = f'üñ§ –í—ã–ø–∞–ª–æ —á–µ—Ä–Ω–æ–µ - {roulette}'
	# 		if bet in black_text:
	# 			add = int(amount)
	# 			wl = ['–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É', '+']
	# 	if roulette in red:
	# 		result = f'‚ù§Ô∏è –í—ã–ø–∞–ª–æ –∫—Ä–∞—Å–Ω–æ–µ - {roulette}'
	# 		if bet in red_text:
	# 			add = int(amount)
	# 			wl = ['–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É', '+']
		

	# 	balance = db_descBalance(ctx.author.id, f"UPDATE users SET cash = cash + {add} WHERE id = {ctx.author.id}")
		
	# 	embed = discord.Embed(description=f'{result} \n \n {ctx.author.mention} {wl[0]}: **{wl[1]}{add}$** :leaves:' + balance, color=var.cMain)
	# 	embed.set_footer(text=f'–°—Ç–∞–≤–∫–∞: {amount}$')
	# 	await ctx.send(embed = embed)






























	# # –†–£–°–°–ö–ê–Ø –†–£–õ–ï–¢–ö–ê –ö–ò–ö –ò–ó –ß–ê–¢–ê
	# @commands.command( aliases = var.aRoulette, brief = var.bRoulette, usage = var.uRoulette )
	# @commands.cooldown(1, 5, commands.BucketType.user)
	# @commands.has_guild_permissions(manage_messages=True)
	# async def russian_roulette( self, ctx ):
	# 	import asyncio

	# 	try:
	# 		channel = ctx.message.author.voice.channel
	# 	except:
	# 		return await ctx.send( ctx.author.name + ', –ø–æ—á–µ–º—É —Ç—ã –∏–≥—Ä–∞–µ—à—å –≤ —Ä—É–ª–µ—Ç–∫—É –Ω–∞ –≤—ã–ª–µ—Ç, –∞ —Å–∞–º –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ?' )
	# 	await ctx.message.delete()
	# 	message = await ctx.send("``–ß–µ—Ä–µ–∑: 3``")
	# 	await asyncio.sleep(0.5)
	# 	await message.edit(content="``–ß–µ—Ä–µ–∑: 2``")
	# 	await asyncio.sleep(0.5)
	# 	await message.edit(content="``–ß–µ—Ä–µ–∑: 1``")
	# 	await asyncio.sleep(0.5)
	# 	dead = random.choice(channel.members)
	# 	await message.edit(content=f"–ë–£–£–ú")
	# 	await asyncio.sleep(0.5)
	# 	await dead.move_to(None)
	# 	await message.edit(content=None, embed=discord.Embed(description=f'{dead.mention} —Å–ª–æ–≤–∏–ª –ø—É–ª—é...'))



	#TEST
	# @commands.command()	
	# async def test( self, ctx ):
	# 	await ctx.send( embed = discord.Embed( title = 'TEST', components = [ Button( style = ButtonStyle.green, label = 'Accept', emoji = 'üí∏' ) ], color = var.cError ) )

		# response = await self.bot.wait_for('button_click')
		# if response.channel == ctx.channel:
		# 	if response.component.label == 'Accept':
		# 		await response.respond(content='Great!')
		# 	else:
		# 		await response.respond(content='–ò–î–ò –ù–ê–•–£–ô')



async def setup(bot):
	await bot.add_cog(Game(bot))

print( 'Cogs - "Game" connected' )