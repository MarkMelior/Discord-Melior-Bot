import nextcord
import var
import asyncio
from SQL import connection, cursor
import random
from config import *





# * CUSTOM –§–£–ù–ö–¶–ò–Ø: EMBED
async def embed_func(
    desc = None, #–û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
    col = cMain, # –¶–í–ï–¢ EMBED
    title = None, # –ó–ê–ì–û–õ–û–í–û–ö
    authorMsg = False, # –û–¢–û–ë–†–ê–ó–ò–¢–¨ –ê–í–¢–û–†–ê, –ö–û–¢–û–†–´–ô –í–´–ó–í–ê–õ –ö–û–ú–ê–ù–î–£
    field_name = None, field_value = None, # –ò–ú–Ø –ò –ó–ù–ê–ß–ï–ù–ò–ï
    img_url = None, # –ö–ê–†–¢–ò–ù–ö–ê
    footer_text = None, # FOOTER –¢–ï–ö–°–¢

    deleteMsg = False, # –£–î–ê–õ–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –ê–í–¢–û–†–ê
    deleteBtn = False, # –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –ù–ê–ñ–ê–í –ù–ê –†–ï–ê–ö–¶–ò–Æ
    deleteAuto = None, # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–î–ê–õ–ï–ù–ò–ï –ß–ï–†–ï–ó [–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö]

    reactionMsg = None, # –î–û–ë–ê–í–ò–¢–¨ –†–ï–ê–ö–¶–ò–Æ –ù–ê –°–û–û–ë–©–ï–ù–ò–ï –ê–í–¢–û–†–ê [true=‚úÖ, false=‚ùå]

    channelSend = None, # –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –í –ö–ê–ù–ê–õ [id –∫–∞–Ω–∞–ª–∞]
    MemberSend = None, # –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –í –õ–° [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]
    MemberDelete = None, # –£–î–ê–õ–ò–¢–¨ –ß–ï–†–ï–ó [–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö]

    # customCommand = None,
    cycleFieldEval = None, # —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è: —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `help`
    cycleFieldName = None, # –∫–æ—Ä—Ç–µ–∂ ['', '']
    cycleFieldValue = None, # –∫–æ—Ä—Ç–µ–∂ ['', '']

    self = None, ctx = None, member = None, # –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ö–û–ú–ú–ê–ù–î–´
    ):


    embed = nextcord.Embed( title = title, description = desc, color = col )
    # eval(customCommand)


    # ADD FIELD
    if cycleFieldEval != None:
        for i in cycleFieldEval:
            name = cycleFieldName + i
            value = cycleFieldValue + i
            embed.add_field( name = eval(name), value = eval(value), inline = False )
    if cycleFieldName != None and cycleFieldEval == None:
        for name, value in zip(cycleFieldName, cycleFieldValue):
            embed.add_field( name = name, value = value, inline = False )
                        

    # –£–î–ê–õ–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –ê–í–¢–û–†–ê
    if deleteMsg == True:
        await ctx.message.delete()
    else:
        # –î–û–ë–ê–í–ò–¢–¨ –†–ï–ê–ö–¶–ò–Æ –ù–ê –°–û–û–ë–©–ï–ù–ò–ï –ê–í–¢–û–†–ê [true=‚úÖ, false=‚ùå]
        if reactionMsg == True:
            await ctx.message.add_reaction("‚úÖ")
        if reactionMsg == False:
            await ctx.message.add_reaction("‚ùå")


    # –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –í –õ–° [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]
    if MemberSend != None:
        sendmember = await member.send( embed = nextcord.Embed( description = MemberSend, color = col ), delete_after = MemberDelete )
    
    # –ö–ê–†–¢–ò–ù–ö–ê
    if img_url != None:
        embed.set_image( url = img_url )

    # –û–¢–û–ë–†–ê–ó–ò–¢–¨ –ê–í–¢–û–†–ê, –ö–û–¢–û–†–´–ô –í–´–ó–í–ê–õ –ö–û–ú–ê–ù–î–£
    if authorMsg == True:
        embed.set_author( name = ctx.author, icon_url = ctx.author.avatar )

    # –ò–ú–Ø –ò –ó–ù–ê–ß–ï–ù–ò–ï
    if field_name != None:
        embed.add_field( name = field_name, value = field_value, inline = False )

    # FOOTER –¢–ï–ö–°–¢
    if footer_text != None:
        embed.set_footer( text = footer_text )

    # –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –í –ö–ê–ù–ê–õ [id –∫–∞–Ω–∞–ª–∞]
    if channelSend != None:
        channel = self.bot.get_channel( channelSend )
        msg = await channel.send( embed = embed, delete_after = deleteAuto )
    else:
        msg = await ctx.send( embed = embed, delete_after = deleteAuto )

    # –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –ù–ê–ñ–ê–í –ù–ê –†–ï–ê–ö–¶–ò–Æ
    if deleteBtn == True:
        # await msg.add_reaction("üóëÔ∏è") # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç–æ–º
        # full_msg = await msg.fetch()
        # await full_msg.add_reaction("üóëÔ∏è") # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞

        def check( reaction, user ):
            #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è/–≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é, —Ç–æ:
            return (user == ctx.user or user == ctx.guild.owner_id) and str( reaction.emoji ) == 'üóëÔ∏è'
        try:
            await self.bot.wait_for('reaction_add', timeout = 60, check = check )
        #–µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ, —Ç–æ:
        except asyncio.TimeoutError:
            return 
        else:
            await msg.delete()
            if MemberSend != None:
                await sendmember.delete()
            if deleteMsg != True:
                await ctx.message.delete()

    return









# * TEMPLATE: –§–£–ù–ö–¶–ò–ò –ó–ê–ü–†–û–°–û–í –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•
#–±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def db_balance_user(id_user):
    cursor.execute(f"SELECT cash FROM users WHERE id = {id_user}") 
    return cursor.fetchone()[0]
#–æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def db_xp_user(id_user):
    cursor.execute(f"SELECT xp FROM users WHERE id = {id_user}") 
    return cursor.fetchone()[0]
#—É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def db_lvl_user(id_user):
    cursor.execute(f"SELECT lvl FROM users WHERE id = {id_user}") 
    return cursor.fetchone()[0]

# –ë–ê–õ–ê–ù–° –ò –û–ü–´–¢: BEFORE & AFTER
def db_descBalance(id_user, evt, xp = False):
    balance_user = db_balance_user(id_user)
    if xp == True:
        xp_user = db_xp_user(id_user)

    cursor.execute(evt)
    connection.commit()

    balance_user_new = db_balance_user(id_user)
    if xp == True:
        xp_user_new = db_xp_user(id_user)


    descBalance = f'\n \n :moneybag: –ë–∞–ª–∞–Ω—Å: {balance_user}$ -> **{balance_user_new}$ :leaves:**'

    if xp == True:
        descXp = f'\n :sparkles: –û–ø—ã—Ç: {xp_user}xp -> **{xp_user_new}xp**'
        return descBalance + descXp
    else:
        return descBalance

        


async def deleteSlash(self, ctx, msg):
    full_msg = await msg.fetch()
    await full_msg.add_reaction("üóëÔ∏è")

    def check( reaction, user ):
        return (user == ctx.user or user == ctx.guild.owner_id) and str( reaction.emoji ) == 'üóëÔ∏è'
    try:
        await self.bot.wait_for('reaction_add', timeout = 10, check = check )
    except asyncio.TimeoutError:
        await full_msg.clear_reactions()
        return 
    else:
        await msg.delete()


# * TEMPLATE: –¥–∞
# function.delete_btn(self, ctx, msg, MemberSend = None, deleteMsg = False)
async def deleteBtn(self, ctx, msg):
    await msg.add_reaction("üóëÔ∏è") # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞

    def check( reaction, user ):
        #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è/–≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é, —Ç–æ:
        return (user == ctx.message.author or user == ctx.guild.owner_id) and str( reaction.emoji ) == 'üóëÔ∏è'
    try:
        await self.bot.wait_for('reaction_add', timeout = 10, check = check )
    #–µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ, —Ç–æ:
    except asyncio.TimeoutError:
        await ctx.message.clear_reactions()
        return 
    else:
        await msg.delete()
        await ctx.message.delete()


#–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def setAuthor(ctx, emb):
    emb.set_author( name = ctx.user, icon_url = ctx.user.avatar )


# –î–û–ë–ê–í–ò–¢–¨ –†–ï–ê–ö–¶–ò–Æ –ù–ê –°–û–û–ë–©–ï–ù–ò–ï –ê–í–¢–û–†–ê [true=‚úÖ, false=‚ùå]
async def setReaction(ctx, React = True):
        if React == True:
            await ctx.message.add_reaction("‚úÖ")
        if React == False:
            await ctx.message.add_reaction("‚ùå")


# –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –í –õ–° [—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è]
async def setUserMessage(member, text, delete = None, color = cMain):
    await member.send(
        embed = nextcord.Embed( description = text, color = color ), delete_after = delete
        )
    
# # –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –í –ö–ê–ù–ê–õ [id –∫–∞–Ω–∞–ª–∞]
# async def setChannel(self, ctx, ID = None, delete = None):
#     if ID != None:
#         channel = self.bot.get_channel( ID )
#         await channel.send( embed = embed, delete_after = delete )
#     else:
#         await ctx.send( embed = embed, delete_after = delete )





# –ü–†–û–í–ï–†–ö–ê –ù–ê –ù–û–í–´–ô –£–†–û–í–ï–ù–¨
async def msgXp(msg):
    cursor.execute(f"SELECT xp, lvl FROM users WHERE id={msg.id}")
    result = cursor.fetchone()
    xp = result[0]
    level = result[1]
    lvch = xp / ((level * 1.5) * 1000)
    if level < lvch: #–µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—å—à–µ —É—Ä–æ–≤–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Ä–∞—Å—Å—á–∏—Ç–∞–Ω —Ñ–æ—Ä–º—É–ª–æ–π –≤—ã—à–µ,...
        bal = int(2000 * lvch)
        embed = nextcord.Embed( title = f':partying_face: –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!', description = f'{msg.mention} —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è `{level+1} lvl`!'+db_descBalance(msg.id, f'UPDATE users SET lvl=lvl+1, cash=cash+{bal} WHERE id={msg.id}'), color = cSuccess )
        embed.set_footer(text=f'–Ω–∞—á–∏—Å–ª–µ–Ω–æ +{bal}$')
        await msg.channel.send( embed = embed )

    connection.commit()#–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î